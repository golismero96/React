{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(require(\"./AndroidSwipeRefreshLayoutNativeComponent\"));\nvar _PullToRefreshViewNativeComponent = _interopRequireWildcard(require(\"./PullToRefreshViewNativeComponent\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"E:\\\\Projects\\\\learning\\\\training_course\\\\ReactNative\\\\MyTestApp\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\RefreshControl\\\\RefreshControl.js\";\nvar _excluded = [\"enabled\", \"colors\", \"progressBackgroundColor\", \"size\"],\n  _excluded2 = [\"tintColor\", \"titleColor\", \"title\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar Platform = require('../../Utilities/Platform');\nvar React = require('react');\nvar RefreshControl = function (_React$Component) {\n  (0, _inherits2.default)(RefreshControl, _React$Component);\n  var _super = _createSuper(RefreshControl);\n  function RefreshControl() {\n    var _this;\n    (0, _classCallCheck2.default)(this, RefreshControl);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._lastNativeRefreshing = false;\n    _this._onRefresh = function () {\n      _this._lastNativeRefreshing = true;\n      _this.props.onRefresh && _this.props.onRefresh();\n      _this.forceUpdate();\n    };\n    _this._setNativeRef = function (ref) {\n      _this._nativeRef = ref;\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(RefreshControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.refreshing !== prevProps.refreshing) {\n        this._lastNativeRefreshing = this.props.refreshing;\n      } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {\n        if (Platform.OS === 'android') {\n          _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        } else {\n          _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        }\n        this._lastNativeRefreshing = this.props.refreshing;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'ios') {\n        var _this$props = this.props,\n          enabled = _this$props.enabled,\n          colors = _this$props.colors,\n          progressBackgroundColor = _this$props.progressBackgroundColor,\n          size = _this$props.size,\n          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        return (0, _jsxRuntime.jsx)(_PullToRefreshViewNativeComponent.default, Object.assign({}, props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh\n        }));\n      } else {\n        var _this$props2 = this.props,\n          tintColor = _this$props2.tintColor,\n          titleColor = _this$props2.titleColor,\n          title = _this$props2.title,\n          _props = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);\n        return (0, _jsxRuntime.jsx)(_AndroidSwipeRefreshLayoutNativeComponent.default, Object.assign({}, _props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh\n        }));\n      }\n    }\n  }]);\n  return RefreshControl;\n}(React.Component);\nmodule.exports = RefreshControl;","map":{"version":3,"names":["_AndroidSwipeRefreshLayoutNativeComponent","_interopRequireWildcard","require","_PullToRefreshViewNativeComponent","_jsxRuntime","_jsxFileName","_excluded","_excluded2","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","Platform","React","RefreshControl","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","_setNativeRef","ref","_nativeRef","_createClass2","value","componentDidMount","refreshing","componentDidUpdate","prevProps","OS","AndroidSwipeRefreshLayoutCommands","setNativeRefreshing","PullToRefreshCommands","render","_this$props","enabled","colors","progressBackgroundColor","size","_objectWithoutProperties2","jsx","assign","_this$props2","tintColor","titleColor","title","Component","module","exports"],"sources":["E:/Projects/learning/training_course/ReactNative/MyTestApp/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: ?('default' | 'large'),\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {enabled, colors, progressBackgroundColor, size, ...props} =\n        this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nmodule.exports = RefreshControl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}