{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPerformanceLogger;\nexports.getCurrentTimestamp = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _global$nativeQPLTime;\nvar Systrace = require('../Performance/Systrace');\nvar infoLog = require('./infoLog');\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nvar getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : global.performance.now.bind(global.performance);\nexports.getCurrentTimestamp = getCurrentTimestamp;\nvar PerformanceLogger = function () {\n  function PerformanceLogger() {\n    (0, _classCallCheck2.default)(this, PerformanceLogger);\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    this._pointExtras = {};\n    this._closed = false;\n  }\n  (0, _createClass2.default)(PerformanceLogger, [{\n    key: \"addTimespan\",\n    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: startTime,\n        endTime: endTime,\n        totalTime: endTime - (startTime || 0),\n        startExtras: startExtras,\n        endExtras: endExtras\n      };\n    }\n  }, {\n    key: \"append\",\n    value: function append(performanceLogger) {\n      this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);\n      this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);\n      this._points = Object.assign({}, performanceLogger.getPoints(), this._points);\n      this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    }\n  }, {\n    key: \"clearCompleted\",\n    value: function clearCompleted() {\n      for (var _key in this._timespans) {\n        var _this$_timespans$_key;\n        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {\n          delete this._timespans[_key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n    }\n  }, {\n    key: \"currentTimestamp\",\n    value: function currentTimestamp() {\n      return getCurrentTimestamp();\n    }\n  }, {\n    key: \"getExtras\",\n    value: function getExtras() {\n      return this._extras;\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this._points;\n    }\n  }, {\n    key: \"getPointExtras\",\n    value: function getPointExtras() {\n      return this._pointExtras;\n    }\n  }, {\n    key: \"getTimespans\",\n    value: function getTimespans() {\n      return this._timespans;\n    }\n  }, {\n    key: \"hasTimespan\",\n    value: function hasTimespan(key) {\n      return !!this._timespans[key];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this._closed;\n    }\n  }, {\n    key: \"logEverything\",\n    value: function logEverything() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          var _this$_timespans$_key2;\n          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {\n            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n        infoLog(this._extras);\n        for (var _key3 in this._points) {\n          if (this._points[_key3] != null) {\n            infoLog(_key3 + ': ' + this._points[_key3] + 'ms');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"markPoint\",\n    value: function markPoint(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._points[key] != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n        return;\n      }\n      this._points[key] = timestamp;\n      if (extras) {\n        this._pointExtras[key] = extras;\n      }\n    }\n  }, {\n    key: \"removeExtra\",\n    value: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    }\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, value) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._extras.hasOwnProperty(key)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n        return;\n      }\n      this._extras[key] = value;\n    }\n  }, {\n    key: \"startTimespan\",\n    value: function startTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: timestamp,\n        startExtras: extras\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    }\n  }, {\n    key: \"stopTimespan\",\n    value: function stopTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      var timespan = this._timespans[key];\n      if (!timespan || timespan.startTime == null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n        return;\n      }\n      if (timespan.endTime != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n        return;\n      }\n      timespan.endExtras = extras;\n      timespan.endTime = timestamp;\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n    }\n  }]);\n  return PerformanceLogger;\n}();\nfunction createPerformanceLogger() {\n  return new PerformanceLogger();\n}","map":{"version":3,"names":["Systrace","require","infoLog","_cookies","PRINT_TO_CONSOLE","getCurrentTimestamp","_global$nativeQPLTime","global","nativeQPLTimestamp","performance","now","bind","exports","PerformanceLogger","_classCallCheck2","default","_timespans","_extras","_points","_pointExtras","_closed","_createClass2","key","value","addTimespan","startTime","endTime","startExtras","endExtras","__DEV__","totalTime","append","performanceLogger","Object","assign","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","_this$_timespans$_key","close","currentTimestamp","hasTimespan","isClosed","logEverything","_this$_timespans$_key2","markPoint","timestamp","arguments","length","undefined","extras","removeExtra","setExtra","hasOwnProperty","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["E:/Projects/learning/training_course/ReactNative/MyTestApp/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nconst Systrace = require('../Performance/Systrace');\nconst infoLog = require('./infoLog');\n\nexport type Timespan = {\n  startTime: number,\n  endTime?: number,\n  totalTime?: number,\n  startExtras?: Extras,\n  endExtras?: Extras,\n};\n\n// Extra values should be serializable primitives\nexport type ExtraValue = number | string | boolean;\n\nexport type Extras = {[key: string]: ExtraValue};\n\nexport interface IPerformanceLogger {\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ): void;\n  append(logger: IPerformanceLogger): void;\n  clear(): void;\n  clearCompleted(): void;\n  close(): void;\n  currentTimestamp(): number;\n  getExtras(): $ReadOnly<{[key: string]: ?ExtraValue, ...}>;\n  getPoints(): $ReadOnly<{[key: string]: ?number, ...}>;\n  getPointExtras(): $ReadOnly<{[key: string]: ?Extras, ...}>;\n  getTimespans(): $ReadOnly<{[key: string]: ?Timespan, ...}>;\n  hasTimespan(key: string): boolean;\n  isClosed(): boolean;\n  logEverything(): void;\n  markPoint(key: string, timestamp?: number, extras?: Extras): void;\n  removeExtra(key: string): ?ExtraValue;\n  setExtra(key: string, value: ExtraValue): void;\n  startTimespan(key: string, timestamp?: number, extras?: Extras): void;\n  stopTimespan(key: string, timestamp?: number, extras?: Extras): void;\n}\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n  }\n}\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(): IPerformanceLogger {\n  return new PerformanceLogger();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}